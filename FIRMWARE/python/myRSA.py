# -*- coding: utf-8 -*-


# 生成公钥私钥，p、q为两个超大质数
def gen_key(_p, _q):
    _n = _p * _q
    phi_n = (_p - 1) * (_q - 1)  # 欧拉函数
    _e = 65537  # 选取e   一般选取65537
    # generate d
    _x, _y, _q = ext_euclid(_e, phi_n)
    # 计算出的d不能是负数，如果是负数，说明p、q、e选取失败，不过可以把d加上phi_n，使d为正数，也能计算
    if _x < 0:
        _x += phi_n
    _d = _x
    #        公钥      私钥
    return (_n, _e), (_n, _d)


# 扩展欧几里得算法
def ext_euclid(_a, _b):
    if _b == 0:
        return 1, 0, _a
    else:
        _x, _y, _q = ext_euclid(_b, _a % _b)
        _x, _y = _y, _x - (_a // _b) * _y
        return _x, _y, _q


# 蒙哥马利算法
def exp_mode(base, n, exponent):
    bin_array = bin(exponent)[2:][::-1]
    r = len(bin_array)

    result = 1

    for i in range(r):
        if int(bin_array[i]):
            result = result * base % n
        base = (base * base) % n

    return result


if __name__ == "__main__":
    '''公钥私钥中用到的两个大质数p,q，都是1024位'''
    p = "1066972191324801731060643171487056386765291217425575677708576877293974468987904515774877239910831730102" \
        "4241686323809971604477565868198182140792272205277895894289183103351246326274105396168151290821800384040" \
        "8526915629689432111480588966800949428079015682624591636010678691927285321708935076221951173426894836169"
    q = "1448194244658423078063536725473441252907167535352396584178838289412325096228386927619172118069630111688" \
        "2228166603369515742651586426552704621332614517439801885905643943142286795707914996759207889441008269571" \
        "4160599647180947207504108618794637872261572262805565517756922288320779308895819726074229154002310375209"
    '''生成公钥私钥'''
    public_key, private_key = gen_key(int(p), int(q))
    print(public_key)
    print(private_key)
    '''需要被加密的信息转化成数字，长度小于秘钥n的长度，如果信息长度大于n的长度，那么分段进行加密，分段解密即可'''
    m = 12345
    print("待加密的信息-->" + str(m))
    c = exp_mode(m, public_key[0], public_key[1])
    print("加密后的密文-->" + str(c))
    d = exp_mode(c, private_key[0], private_key[1])
    print("解密后的明文-->" + str(d))
